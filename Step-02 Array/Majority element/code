#include <iostream>
#include <vector>
#include<climits>
using namespace std;

//pair sum brute force approch
vector<int> pairsum(vector<int>nums, int target){
    vector<int>ans;
    int n = nums.size();

    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(nums[i] + nums[j] == target){
                ans.push_back(i);
                ans.push_back(j);
                return ans;
            }
        }
    }
    return ans;
}

//pair sum  optimal approach
                     // this the parameters of vector function
vector<int> pairsum(vector<int>nums, int target){//this is the vector function and 
    vector<int>ans;// this this the empty vector
    int n = nums.size();//this is the size of vector

   int i = 0, j = n-1;

   while(i<j){
    int pairsum = nums[i] + nums[j];
    if(pairsum > target){
        j--;
    }else if(pairsum < target){
        i++;
    }else{
        ans.push_back(i);
        ans.push_back(j);
        return ans;
    }
   }
    return ans;
}


int main() { 
 vector<int> nums = {2,7,11,15};
 int target = 9;

 vector<int> ans = pairsum(nums, target);
 cout<< ans[0] <<" , "<<ans[1]<<endl;
 return 0; 
}  

//majority element in brute force apporach

 int majorityElement(vector<int>& nums) {
       int n = nums.size();

       for(int val : nums){
        int freq = 0;

        for(int el : nums){
            if(el == val){
                freq++;
            }
        }
        if(freq>n/2){
            return val;
        }
       } 
       return -1;
    }
//majority element in optimal approach
int majorityElement(vector<int>& nums){
    int n = nums.size();

    //sort
    sort(nums.begin(), nums.end());

    //freq count
    int freq = 1, ans = nums[0];
    for(int i=1; i<n; i++){
        if(nums[i] == nums[i-1]){
            freq++;
        } else{
            freq = 1;
            ans = nums[i];
        }
        if(freq>n/2){
            return ans;
        }
    }
    return ans;
   } 
// moore's algoriths
int majorityElement(vector<int>& nums){
    int freq = 0, ans = 0;

    for(int i=0; i<nums.size(); i++){
        if(freq == 0){
            ans = nums[i];
        }
        if(ans == nums[i]){
            freq++;
        } else{
            freq--;
        }
    }
    return ans;
   }
};
};
