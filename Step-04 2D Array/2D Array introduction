#include<iostream>
using namespace std;

//leaner serach 2D array
    bool linearSreach(int mat[][3], int rows, int cols, int key) {
    for(int i=0; i<rows; i++) {
        for(int j=0; j<cols; j++) {
            if(mat[i][j] == key) {
                return true;
            }
        }
    }

    return false;
}

//Maxrow sum
int getMaxSum(int mat[][3], int rows, int cols) {
    int maxRowSum = INT_MIN;

    for(int i=0; i<rows; i++) {
        int rowSum = 0;
        for(int j=0; j<cols; j++) {
            rowSum += mat[i][j];
        }
        maxRowSum = max(maxRowSum, rowSum);
    }
    return maxRowSum;
}

//Diagonal sum
int diagonalSum(int mat[][4], int n) {
    int sum = 0;

    //Primery diagonal : j=i
    //Secondary diagonal : j = n-i-1

    for(int i=0; i<n; i++) {
        sum += mat[i][i];

        if(i != n-i-1) {
            sum += mat[i][n-i-1];
        }
    }
    return sum;
}

int main() {
    int arr[5] = {1,2,3,4,5}; //this is 1D Array
    int matrix[4][3] = {{1,2,3}, {4,5,6}, {7,8,9}, {10,11,12}};// 2D Array
    int rows = 4;
    int cols = 3;

    cout<< matrix[2][1]<<endl;// access of 2D Array element
    matrix[2][1] = 16; //replace element in matrix
    cout<< matrix[2][1];

      
    //for input
    for(int i=0; i<rows; i++) {
        for(int j=0; j<cols; j++) {
            cin>> matrix[i][j];
        }   
    }
    
    //loop in 2D Array
    for(int i=0; i<rows; i++) {
        for(int j=0; j<cols; j++) {
            cout<< matrix[i][j];
        }
        cout<< endl;
    }
//function call
cout<< linearSreach(matrix, rows, cols, 8) << endl;
cout<< getMaxSum(matrix, rows, cols) << endl;
 cout<<diagonalSum(matrix, n);
    
    return 0;
}
